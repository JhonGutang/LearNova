// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CREATOR
  STUDENT
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  creator Creator?
  student Student?
}

model Student {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  first_name  String
  last_name   String
  middle_name String?
  phone       String
  address     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user                User                 @relation(fields: [user_id], references: [id])
  enrolledCourses     Enrolled_Course[]
}

model Enrolled_Course {
  id             Int      @id @default(autoincrement())
  student_id     Int
  course_id      Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  student        Student  @relation(fields: [student_id], references: [id])
  course         Course   @relation(fields: [course_id], references: [id])
  lessonProgress Lesson_Progress[]

  @@unique([student_id, course_id])
}

enum LessonProgressStatus {
  IN_PROGRESS
  FINISHED
}

model Lesson_Progress {
  id                 Int                   @id @default(autoincrement())
  enrolled_course_id Int
  lesson_id          Int
  status             LessonProgressStatus  @default(IN_PROGRESS)
  created_at         DateTime              @default(now())
  updated_at         DateTime              @updatedAt

  enrolledCourse     Enrolled_Course       @relation(fields: [enrolled_course_id], references: [id])
  lesson             Lesson                @relation(fields: [lesson_id], references: [id])
}

model Creator {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  first_name  String
  last_name   String
  middle_name String?
  phone       String
  address     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user                User                 @relation(fields: [user_id], references: [id])
  courses             Course[]
}


enum Status {
  PUBLISHED
  DRAFT
  UNLISTED
}

model Course {
  id          Int               @id @default(autoincrement())
  creator_id  Int
  title       String            @unique
  tagline     String
  status      Status            @default(DRAFT)
  description String
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  categories  Course_Category[]
  lessons     Lesson[]
  creator     Creator           @relation(fields: [creator_id], references: [id])
  enrolledCourses Enrolled_Course[]
}

model Category {
  id      Int               @id @default(autoincrement())
  name    String            @unique
  modules Course_Category[]
}

model Course_Category {
  course_id   Int
  category_id Int

  course   Course   @relation(fields: [course_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@id([course_id, category_id])
}

model Lesson {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  course Course        @relation(fields: [course_id], references: [id])
  pages  Lesson_Page[]
  lessonProgress Lesson_Progress[]
}

model Lesson_Page {
  id           Int      @id @default(autoincrement())
  lesson_id    Int
  page_number  Int
  content_json Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@unique([lesson_id, page_number])
}
