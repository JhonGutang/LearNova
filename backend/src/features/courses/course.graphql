

type Course {
  id: ID!
  creatorName: String
  title: String!
  tagline: String!
  description: String
  status: String
  categories: [String!]!
  createdAt: String!
  isEnrolled: Boolean
  enrolledCourseId: Int
  studentsEnrolled: [StudentsEnrolled] 
  lessons: [Lesson]
}

type StudentsEnrolled {
  id: ID!
  studentId: ID!
  course_id: ID!
}


type Lesson {
  id: ID!
  title: String!
  description: String!
}

enum LessonProgressStatus {
  IN_PROGRESS
  FINISHED
}

type LessonProgress {
  id: ID!
  enrolledCourseId: ID!
  lessonId: ID!
  status: LessonProgressStatus!
}

input CourseInput {
  title: String!
  tagline: String!
  description: String!
  categories: [String!]!
}

extend type Query {
  course(id: ID!, title: String): Course
  courses: [Course!]!
  enrolledCourses: [Course!]!
}

type BaseResponse {
  status: Status
  message: String
}

type ProgressResponse {
  status: Status
  message: String
  progressStatus: String
}

extend type Mutation {
  createCourse(input: CourseInput!): Course!
  enrollCourse(courseId: Int): BaseResponse
  startProgress(enrolledCourseId: Int, lessonId: Int): ProgressResponse
  finishProgress(enrolledCourseId: Int, lessonId: Int): ProgressResponse
}
