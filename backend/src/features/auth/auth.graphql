type User {
  id: Int!
  email: String!
  
}

type CreatorProfile {
  id: Int!
  userId: Int!
  firstName: String!
  lastName: String!
  middleName: String
  email: String!
  phone: String!
  address: String!
  createdAt: DateTime
}

type StudentProfile {
  id: Int!
  userId: Int!
  firstName: String!
  lastName: String!
  middleName: String
  email: String!
  phone: String!
  address: String!
  createdAt: DateTime
}

enum Role {
  CREATOR
  STUDENT
}

input LoginInput {
  email: String!
  password: String!
  role: Role!
}

input ChangePasswordInput {
  email: String!
  password: String!
}

enum ResponseStatus {
  SUCCESS
  ERROR
}

type BaseResponse {
  status: ResponseStatus
  message: String
}

union UserProfile = CreatorProfile | StudentProfile

type Query {
  user: UserProfile
}

type Mutation {
  login(input: LoginInput): BaseResponse
  changePassword(input: ChangePasswordInput): BaseResponse
  logout: BaseResponse
}
